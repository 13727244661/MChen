#include<stdio.h>
#include<iostream>
#include<graphics.h>
#include<conio.h>
#include<stdlib.h>
using namespace std;
#define SNAKE_NUM 500
enum DIR
{
	UP,
	DOWN,
	LECT,
	RIGHT,
};
struct  Snake
{
	int size;
	int dir;
	int speed;
	POINT coor[SNAKE_NUM];

	
}snake;
struct Food
{
	int x;
	int y;
	int r;
	bool flag;
	DWORD color;
}food;
void GameInit()
{
	initgraph(640, 480,EX_SHOWCONSOLE);
	snake.size = 3;
	snake.speed = 10;
	snake.dir=RIGHT;
	for (int i = 0; i<snake.size; i++)
	{
		snake.coor[i].x = 50-10*i;
		snake.coor[i].y = 20;

	}
	srand(GetTickCount());
	food.x = rand() % 610+20;
	food.y = rand() % 450+20;
	food.color=RGB(rand() % 256, rand() % 256, rand() % 256);
	food.r = rand() % 10+5;
	food.flag = true;
	
}
void GameDraw()
{
	BeginBatchDraw();


	setbkcolor(RGB(0, 0, 0));
	
	cleardevice();
	
	setfillcolor(RED);
	solidcircle(snake.coor[0].x, snake.coor[0].y, 5);
	for(int i=1;i<snake.size;i++)
	circle(snake.coor[i].x, snake.coor[i].y, 5);
	setfillcolor(RGB(0, 0, 255));
	for (int i = 0; i < 640; i+=10)
	{
		solidrectangle(i, 0, 10 + i, 10);
	}
	solidrectangle(0, 0, 10, 480);
	solidrectangle(630, 0, 640, 480);
	solidrectangle(0, 470, 640, 480);
	if (food.flag)
	{
		setfillcolor(food.color);
		solidcircle(food.x, food.y,food.r);
		
	}
	EndBatchDraw();
}

void endgame()
{
	BeginBatchDraw();
	settextcolor(RGB(255,0,0));
	RECT r = { 0, 0, 639, 479 };
	drawtext(_T("游戏结束"), &r, DT_CENTER | DT_VCENTER | DT_SINGLELINE);
	

	EndBatchDraw();
}
void snakeMove()
{
	for (int i = snake.size - 1; i > 0; i--)
	{
		snake.coor[i] = snake.coor[i - 1];
	}
	switch (snake.dir)
	{
	case RIGHT:if (snake.coor[0].x + 5 >= 630)
	{
		endgame();
		while (1)
		{
			if (_getch() == ' ')
				break;
		};
	}
			  snake.coor[0].x += snake.speed;

			  break;
	case UP:if (snake.coor[0].y - 5 <= 10)
	{
		snake.coor[0].y = 480; endgame();
		while (1)
		{
			if (_getch() == ' ')
				break;
		};

	}snake.coor[0].y -= snake.speed;
	break;
	case LECT:if (snake.coor[0].x - 5 <= 10)
	{
		endgame();
		while (1)
		{
			if (_getch() == ' ')
				break;
		};

	}snake.coor[0].x -= snake.speed;
	break;
	case DOWN:if (snake.coor[0].y + 5 >= 470)
	{
		endgame();
		while (1)
		{
			if (_getch() == ' ')
				break;
		};

	}snake.coor[0].y += snake.speed;
	break;


	}
		
}

void keyC()
{
	if (_kbhit())
	{
		switch (_getch())
		{//72 80 75 77 上下左右
		case 'w':
		case 'W':
		case 72:
			if(snake.dir!=DOWN)
			snake.dir = UP;
			break;
		case 's':
		case 'S':
		case 80:
			if (snake.dir != UP)snake.dir = DOWN;
			break;
		case 'a':
		case 'A':
		case 75:if (snake.dir != RIGHT)snake.dir = LECT;
			break;
		case 'd':
		case 'D':
		case 77:if (snake.dir != LECT)snake.dir = RIGHT;
			break;
		case ' ':
			while (1)
		{
			if (_getch() == ' ')
				return;
		}
				break;
		}
	}
	
}
void Eatfood()
{
	if (food.flag&&snake.coor[0].x >=food.x-food.r &&snake.coor[0].x<=food.x+food.r&&snake.coor[0].y>=food.y-food.r&& snake.coor[0].y <= food.y + food.r)
	{
		food.flag = false;
		snake.size++;
	}
	if (!food.flag)
	{
		food.x = rand() % 640;
		food.y = rand() % 480;
		food.color = RGB(rand() % 256, rand() % 256, rand() % 256);
		food.r = rand() % 10 + 5;
		food.flag = true;

	}
}

void stop()
{
	if (_kbhit())
	{
		if (_getch() == ' ')
		{
			while (1)
			{
				if (_getch() == ' ')
					break;
			};
		}
	}
}

int main()
{
	GameInit();
	//GameDraw();
	
	while (1)
	{
		keyC();
		GameDraw();
		snakeMove();
		
		Eatfood();
	
		Sleep(100 );
	
	}
	return 0;
}